{"version":3,"file":"static/js/696.73439e6d.chunk.js","mappings":"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","sources":["api/question.ts","components/CustomDialog/index.tsx","content/chat/ChatHeader.tsx","api/chat.ts","content/chat/ChatInput.tsx","utils/formatChatTime.ts","content/chat/message/MyMessage.tsx","content/chat/message/OtherMessage.tsx","content/chat/ChatContent.tsx","components/Scrollbar/index.tsx","content/chat/index.tsx","content/user/profile/Rank.tsx"],"sourcesContent":["import { Category } from 'src/data/category'\r\nimport ApiManager from '.'\r\nimport { QuestionInfo, QuestionPreview } from 'src/models/question'\r\n\r\nexport const getQuestions = async (category: Category): Promise<QuestionPreview[]> => {\r\n  if (category === '') {\r\n    const response = await ApiManager.get('/qa/list')\r\n    return response.data\r\n  }\r\n  const response = await ApiManager.get(`/qa/list/${category.toUpperCase()}`)\r\n  return response.data\r\n}\r\n\r\nexport const postQuestionNew = async (token: string, questionInfo: QuestionInfo): Promise<{ id: number }> => {\r\n  const res = await ApiManager.post('/qa/new', questionInfo, {\r\n    headers: {\r\n      Authorization: `${token}`\r\n    }\r\n  })\r\n  return res.data\r\n}\r\n\r\nexport const postQuestionJoin = async (token: string, questionId: number): Promise<void> => {\r\n  await ApiManager.post(\r\n    `/qa/join`,\r\n    { qaId: questionId },\r\n    {\r\n      headers: {\r\n        Authorization: `${token}`\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\nexport const postQuestionEndAI = async (token: string, questionId: number): Promise<void> => {\r\n  await ApiManager.post(\r\n    `/qa/endAI`,\r\n    { qaId: questionId },\r\n    {\r\n      headers: {\r\n        Authorization: `${token}`\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\nexport const postQuestionEnd = async (token: string, questionId: number): Promise<void> => {\r\n  await ApiManager.post(\r\n    `/qa/end`,\r\n    { qaId: questionId },\r\n    {\r\n      headers: {\r\n        Authorization: `${token}`\r\n      }\r\n    }\r\n  )\r\n}\r\n","import { Button, Dialog, DialogActions, Typography } from '@mui/material'\r\n\r\ninterface CustomDialogProps {\r\n  text: string\r\n  open: boolean\r\n  primaryText?: string\r\n  cancelText?: string\r\n  onClose: () => void\r\n  onClickPrimary?: () => void\r\n}\r\n\r\nconst CustomDialog = (props: CustomDialogProps) => {\r\n  const { cancelText, primaryText, text, open, onClose, onClickPrimary } = props\r\n  return (\r\n    <Dialog open={open} onClose={onClose}>\r\n      <Typography variant=\"h5\" sx={{ fontWeight: 'bold', textAlign: 'center', mt: 2, maxWidth: 300, p: 2 }}>\r\n        {text}\r\n      </Typography>\r\n      {(cancelText || primaryText) && (\r\n        <DialogActions>\r\n          {cancelText && <Button onClick={onClose}>{cancelText}</Button>}\r\n          {primaryText && (\r\n            <Button onClick={onClickPrimary} autoFocus>\r\n              {primaryText}\r\n            </Button>\r\n          )}\r\n        </DialogActions>\r\n      )}\r\n    </Dialog>\r\n  )\r\n}\r\n\r\nexport default CustomDialog\r\n","import { Box, Tooltip, Avatar, Typography, styled, Button, Chip } from '@mui/material'\nimport CheckCircleIcon from '@mui/icons-material/CheckCircle'\nimport RecordVoiceOverIcon from '@mui/icons-material/RecordVoiceOver'\nimport stringToHexColor from 'src/utils/stringToColor'\nimport CustomDialog from 'src/components/CustomDialog'\nimport { useState } from 'react'\nimport { enqueueSnackbar } from 'notistack'\nimport { postQuestionEnd, postQuestionEndAI, postQuestionJoin } from 'src/api/question'\nimport { useAuthHeader } from 'react-auth-kit'\nimport { Profile } from 'src/models/chat'\nimport { GradeSet } from 'src/models/user'\nimport { useNavigate } from 'react-router'\nimport RankBadge from '../user/profile/Rank'\nimport QuestionAnswerIcon from '@mui/icons-material/QuestionAnswer'\nexport const BOT = 'Agora Bot'\n\ninterface ChatHeaderProps {\n  isQuestionUser: boolean\n  profile: Profile | null\n  qaId: number\n  createdAt?: string\n  handleRefresh?: () => void\n  chatState: number\n}\n\nconst ChatHeader = ({ isQuestionUser, profile, qaId, createdAt, chatState, handleRefresh }: ChatHeaderProps) => {\n  const [isOpenDone, setIsOpenDone] = useState(false)\n  const [isOpenChange, setIsOpenChange] = useState(false)\n  const [isOpenAnswer, setIsOpenAnswer] = useState(false)\n\n  const navigate = useNavigate()\n  const token = useAuthHeader()()\n\n  const handleOpenDone = () => {\n    setIsOpenDone(prev => !prev)\n  }\n\n  const handleOpenAnswer = () => {\n    setIsOpenAnswer(prev => !prev)\n  }\n\n  const handleOpenChange = () => {\n    setIsOpenChange(prev => !prev)\n  }\n\n  const handleStartAnswering = async () => {\n    try {\n      await postQuestionJoin(token, qaId)\n      enqueueSnackbar('답변을 시작합니다! 좋은 답변 부탁드려요:)', { variant: 'success' })\n      handleRefresh()\n      handleOpenAnswer()\n    } catch {\n      enqueueSnackbar('서버에서 에러가 생겼어요. 나중에 다시 시도해 주세요', { variant: 'error' })\n    }\n  }\n  const handleClickDone = async () => {\n    try {\n      await postQuestionEnd(token, qaId)\n      enqueueSnackbar('문제가 해결되었다니 다행이에요!', { variant: 'success' })\n      handleOpenDone()\n      navigate('/profile')\n    } catch (error) {\n      enqueueSnackbar('서버에서 에러가 생겼어요. 나중에 다시 시도해 주세요', { variant: 'error' })\n      handleOpenDone()\n    }\n  }\n\n  const handleClickChange = async () => {\n    try {\n      await postQuestionEndAI(token, qaId)\n      handleOpenChange()\n      handleRefresh()\n    } catch (error) {\n      enqueueSnackbar('서버에서 에러가 생겼어요. 나중에 다시 시도해 주세요', { variant: 'error' })\n      handleOpenChange()\n    }\n  }\n\n  return (\n    <RootWrapper>\n      <Box display=\"flex\" alignItems=\"center\">\n        {chatState !== 1 && (\n          <Avatar sx={{ bgcolor: stringToHexColor(profile?.nickname ?? BOT) }}>{profile?.nickname[0] ?? BOT[0]}</Avatar>\n        )}\n        {chatState === 1 && (\n          <Typography variant=\"h4\" sx={{ fontWeight: 'bold' }}>\n            답변자를 기다리는 중입니다\n          </Typography>\n        )}\n        {profile && (\n          <Box width=\"auto\" justifyContent={'center'}>\n            <Box display={'flex'} justifyContent={'center'}>\n              <RankBadge rank={profile.rank} />\n            </Box>\n          </Box>\n        )}\n        <Box>\n          <Box display={'flex'} alignItems={'center'}>\n            <Typography variant=\"h4\">&nbsp;{profile?.nickname ?? BOT}</Typography>\n            {profile && <Chip label={GradeSet[profile.grade]} sx={{ mx: 1 }} size=\"small\" color=\"primary\" />}{' '}\n          </Box>\n          {profile && profile.grade !== 'PROFESSOR' && (\n            <Typography variant=\"subtitle1\">{profile.univId.slice(0, 2)} 학번 </Typography>\n          )}\n        </Box>\n      </Box>\n      {isQuestionUser ? (\n        <Box sx={{ display: 'flex', alignItems: 'center' }}>\n          {createdAt && (\n            <Typography variant=\"subtitle1\" sx={{ mr: 2 }}>\n              생성일: {createdAt.split('T')[0].replaceAll('-', '.')}\n            </Typography>\n          )}\n          <Tooltip placement=\"bottom\" title=\"문제가 해결되었어요\">\n            <Button\n              startIcon={<CheckCircleIcon />}\n              variant=\"outlined\"\n              color=\"success\"\n              onClick={handleOpenDone}\n              sx={{ mr: 2 }}\n            >\n              <Typography variant=\"subtitle1\">해결</Typography>\n            </Button>\n          </Tooltip>\n          {chatState === 0 && (\n            <Tooltip placement=\"bottom\" title=\"사람을 연결해주세요\">\n              <Button startIcon={<RecordVoiceOverIcon />} variant=\"outlined\" color=\"primary\" onClick={handleOpenChange}>\n                <Typography variant=\"subtitle1\">전환</Typography>\n              </Button>\n            </Tooltip>\n          )}\n        </Box>\n      ) : chatState !== 2 ? (\n        <Tooltip placement=\"bottom\" title=\"문제가 해결되었어요\">\n          <Button\n            startIcon={<QuestionAnswerIcon />}\n            variant=\"outlined\"\n            color=\"success\"\n            onClick={handleOpenAnswer}\n            sx={{ mr: 2 }}\n          >\n            <Typography variant=\"subtitle1\">답변하기</Typography>\n          </Button>\n        </Tooltip>\n      ) : (\n        <Typography variant={'h4'}>내가 답변중이에요</Typography>\n      )}\n      <CustomDialog\n        text={'문제가 해결되었나요? 완료하시면 돌이킬 수 없으니 신중하게 선택해주세요!'}\n        open={isOpenDone}\n        onClose={handleOpenDone}\n        onClickPrimary={handleClickDone}\n        primaryText=\"완료\"\n        cancelText=\"취소\"\n      />\n      <CustomDialog\n        text={'선배들에게서 직접 답변을 받을 수 있는 기능이에요. 계속 하시겠어요?'}\n        open={isOpenChange}\n        onClose={handleOpenChange}\n        onClickPrimary={handleClickChange}\n        primaryText=\"전환\"\n        cancelText=\"취소\"\n      />\n      <CustomDialog\n        text={'학우님에게 직접 답변을 받을 수 있는 기능이에요. 계속 하시겠어요?'}\n        open={isOpenAnswer}\n        onClose={handleOpenAnswer}\n        onClickPrimary={handleStartAnswering}\n        primaryText=\"시작\"\n        cancelText=\"취소\"\n      />\n    </RootWrapper>\n  )\n}\n\nexport default ChatHeader\n\nconst RootWrapper = styled(Box)(\n  ({ theme }) => `\n        @media (min-width: ${theme.breakpoints.values.md}px) {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n      }\n`\n)\n","import { ChatInfo, ChatState } from 'src/models/chat'\r\nimport ApiManager from '.'\r\n\r\nexport const postQuestionChat = async (token: string, chatInfo: ChatInfo): Promise<void> => {\r\n  console.log(chatInfo)\r\n  await ApiManager.post(`/qa/chat`, chatInfo, {\r\n    headers: {\r\n      Authorization: `${token}`\r\n    }\r\n  })\r\n}\r\n\r\nexport const getQuestionChat = async (token: string, qaId: number): Promise<ChatState> => {\r\n  const response = await ApiManager.get(`/qa/chat/${qaId}`, {\r\n    headers: {\r\n      Authorization: `${token}`\r\n    }\r\n  })\r\n  return response.data\r\n}\r\n","import { Avatar, Box, Button, styled, InputBase, useTheme } from '@mui/material'\nimport SendTwoToneIcon from '@mui/icons-material/SendTwoTone'\nimport stringToHexColor from 'src/utils/stringToColor'\nimport { useAuthHeader, useAuthUser } from 'react-auth-kit'\nimport { useState } from 'react'\nimport { Category } from 'src/data/category'\nimport { postQuestionNew } from 'src/api/question'\nimport { QuestionInfo } from 'src/models/question'\nimport { enqueueSnackbar } from 'notistack'\nimport { useNavigate, useParams } from 'react-router'\nimport { postQuestionChat } from 'src/api/chat'\nimport { ChatInfo } from 'src/models/chat'\n\nconst ChatInput = ({ isQuestionUser, handleRefresh }: { isQuestionUser: boolean; handleRefresh: () => void }) => {\n  const theme = useTheme()\n  const user = useAuthUser()()\n  const token = useAuthHeader()()\n  const navigate = useNavigate()\n\n  const { category } = useParams()\n  const qaId = Number(category)\n\n  const [questionInfo, setQuestionInfo] = useState<QuestionInfo>({\n    question: '',\n    category: category?.toUpperCase() as Category\n  })\n\n  const [chatInfo, setChatInfo] = useState<ChatInfo>({\n    qaId: qaId,\n    chat: '',\n    isQuestion: isQuestionUser,\n    questionId: 0\n  })\n\n  const handleChangeChat = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setChatInfo({\n      ...chatInfo,\n      chat: event.target.value\n    })\n  }\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuestionInfo({\n      ...questionInfo,\n      question: event.target.value\n    })\n  }\n\n  const handleSendMessage = async () => {\n    try {\n      await postQuestionChat(token, { ...chatInfo, qaId: qaId })\n      setChatInfo({\n        ...chatInfo,\n        chat: ''\n      })\n      handleRefresh()\n    } catch (error) {\n      enqueueSnackbar('채팅이 전송되지 않았어요. 나중에 다시 시도해 주세요', { variant: 'error' })\n    }\n  }\n\n  const handleCreateChatRoom = async () => {\n    try {\n      const res = await postQuestionNew(token, questionInfo)\n      enqueueSnackbar('채팅방이 생성되었어요!', { variant: 'success' })\n      navigate(`/chat/${res.id}`)\n      handleRefresh()\n    } catch (error) {\n      enqueueSnackbar('서버에서 에러가 생겼어요. 나중에 다시 시도해 주세요', { variant: 'error' })\n    }\n  }\n\n  return (\n    <Box sx={{ background: theme.colors.alpha.white[50], display: 'flex', alignItems: 'center', p: 2 }}>\n      <Box flexGrow={1} display=\"flex\" alignItems=\"center\">\n        {user && <Avatar sx={{ bgcolor: stringToHexColor(user.nickname) }}>{user.nickname[0]}</Avatar>}{' '}\n        <MessageInputWrapper\n          autoFocus\n          placeholder=\"질문을 입력해주세요\"\n          fullWidth\n          value={qaId ? chatInfo.chat : questionInfo.question}\n          onChange={qaId ? handleChangeChat : handleChange}\n        />\n        <Box>\n          <Button\n            startIcon={<SendTwoToneIcon />}\n            variant=\"contained\"\n            sx={{ width: 150, height: 50 }}\n            onClick={qaId ? handleSendMessage : handleCreateChatRoom}\n          >\n            {qaId ? '보내기' : '채팅방 생성'}\n          </Button>\n        </Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default ChatInput\n\nconst MessageInputWrapper = styled(InputBase)(\n  ({ theme }) => `\n    font-size: ${theme.typography.pxToRem(18)};\n    padding: ${theme.spacing(1)};\n    width: 100%;\n`\n)\n","export const formatChatTime = (sentAt: string): string => {\r\n  const date = new Date(sentAt)\r\n  const month = date.getMonth() + 1\r\n  const day = date.getDate()\r\n  const hours = date.getHours()\r\n  const minutes = date.getMinutes() < 10 ? `0${date.getMinutes()}` : date.getMinutes()\r\n  const today = new Date()\r\n  if (\r\n    date.getDate() === today.getDate() &&\r\n    date.getMonth() === today.getMonth() &&\r\n    date.getFullYear() === today.getFullYear()\r\n  ) {\r\n    return `${hours}:${minutes}`\r\n  }\r\n  return `${month}/${day} ${hours}:${minutes}`\r\n}\r\n","import { Box, Typography, Card, styled } from '@mui/material'\r\nimport { formatChatTime } from 'src/utils/formatChatTime'\r\n\r\ninterface MyMessageProps {\r\n  message: string\r\n  sentAt: string\r\n}\r\n\r\nconst MyMessage = ({ message, sentAt }: MyMessageProps) => {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"flex-start\" justifyContent=\"flex-end\" py={3}>\r\n      <Box display=\"flex\" alignItems=\"flex-end\" justifyContent=\"flex-end\" mr={2}>\r\n        <Typography variant=\"subtitle1\" sx={{ pt: 1, mr: 1, display: 'flex', alignItems: 'center' }}>\r\n          {formatChatTime(sentAt)}\r\n        </Typography>\r\n        <CardWrapperPrimary>{message}</CardWrapperPrimary>\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MyMessage\r\n\r\nconst CardWrapperPrimary = styled(Card)(\r\n  ({ theme }) => `\r\n        background: ${theme.colors.primary.main};\r\n        color: ${theme.palette.primary.contrastText};\r\n        padding: ${theme.spacing(2)};\r\n        border-radius: ${theme.general.borderRadiusXl};\r\n        border-top-right-radius: ${theme.general.borderRadius};\r\n        max-width: 380px;\r\n        display: inline-flex;\r\n  `\r\n)\r\n","import { Box, Typography, Card, styled, Avatar, CircularProgress } from '@mui/material'\r\nimport { formatChatTime } from 'src/utils/formatChatTime'\r\nimport stringToHexColor from 'src/utils/stringToColor'\r\n\r\ninterface MyMessageProps {\r\n  message: string\r\n  sentAt?: string\r\n  nickname: string\r\n}\r\n\r\nconst OtherMessage = ({ message, sentAt, nickname }: MyMessageProps) => {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"flex-start\" justifyContent=\"flex-start\" py={3}>\r\n      <Avatar sx={{ bgColor: stringToHexColor(nickname) }}>{nickname[0]}</Avatar>\r\n      <Box display=\"flex\" alignItems=\"flex-base\" justifyContent=\"flex-start\" ml={2}>\r\n        <CardWrapperSecondary sx={{ mb: 1 }}>\r\n          <Box display={'block'}>\r\n            <Box display={'flex'} justifyContent={'center'}>\r\n              {!sentAt && <CircularProgress />}\r\n            </Box>\r\n            <Typography>{message}</Typography>\r\n          </Box>\r\n        </CardWrapperSecondary>\r\n        {sentAt && (\r\n          <Typography variant=\"subtitle1\" sx={{ ml: 1, pt: 1, display: 'flex', alignItems: 'center' }}>\r\n            {formatChatTime(sentAt)}\r\n          </Typography>\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default OtherMessage\r\n\r\nconst CardWrapperSecondary = styled(Card)(\r\n  ({ theme }) => `\r\n      background: ${theme.colors.alpha.black[10]};\r\n      color: ${theme.colors.alpha.black[100]};\r\n      padding: ${theme.spacing(2)};\r\n      border-radius: ${theme.general.borderRadiusXl};\r\n      border-top-left-radius: ${theme.general.borderRadius};\r\n      max-width: 380px;\r\n      display: inline-flex;\r\n`\r\n)\r\n","import { Box } from '@mui/material'\n\nimport MyMessage from './message/MyMessage'\nimport OtherMessage from './message/OtherMessage'\nimport { ChatHistory } from 'src/models/chat'\nimport { BOT } from './ChatHeader'\n\ninterface ChatContentProps {\n  nickname: string\n  chatDetails: ChatHistory[]\n  isQuestionUser: boolean\n  isLoading: boolean\n  chatState: number\n}\n\nconst ChatContent = ({ isQuestionUser, nickname, chatState, chatDetails, isLoading }: ChatContentProps) => {\n  const isAI = chatState === 0\n  return (\n    <Box p={3}>\n      {chatDetails?.map((chatDetail, index) => {\n        if (isQuestionUser) {\n          if (chatDetail.isQuestion) {\n            return <MyMessage key={index} message={chatDetail.chat} sentAt={chatDetail.createdAt} />\n          } else {\n            return (\n              <OtherMessage key={index} message={chatDetail.chat} sentAt={chatDetail.createdAt} nickname={nickname} />\n            )\n          }\n        }\n        if (chatDetail.isQuestion) {\n          return (\n            <OtherMessage key={index} message={chatDetail.chat} sentAt={chatDetail.createdAt} nickname={nickname} />\n          )\n        } else {\n          return <MyMessage key={index} message={chatDetail.chat} sentAt={chatDetail.createdAt} />\n        }\n      })}\n      {isLoading && (\n        <Box sx={{ display: 'flex', justifyContent: 'center' }}>\n          <OtherMessage\n            message={isAI ? `${BOT}의 답변을 생성중입니다...` : '잠시만 기다려주세요'}\n            nickname={nickname}\n          />\n        </Box>\n      )}\n    </Box>\n  )\n}\n\nexport default ChatContent\n","import { FC, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport { Scrollbars } from 'react-custom-scrollbars-2';\n\nimport { Box, useTheme } from '@mui/material';\n\ninterface ScrollbarProps {\n  className?: string;\n  children?: ReactNode;\n}\n\nconst Scrollbar: FC<ScrollbarProps> = ({ className, children, ...rest }) => {\n  const theme = useTheme();\n\n  return (\n    <Scrollbars\n      autoHide\n      renderThumbVertical={() => {\n        return (\n          <Box\n            sx={{\n              width: 5,\n              background: `${theme.colors.alpha.black[10]}`,\n              borderRadius: `${theme.general.borderRadiusLg}`,\n              transition: `${theme.transitions.create(['background'])}`,\n\n              '&:hover': {\n                background: `${theme.colors.alpha.black[30]}`\n              }\n            }}\n          />\n        );\n      }}\n      {...rest}\n    >\n      {children}\n    </Scrollbars>\n  );\n};\n\nScrollbar.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string\n};\n\nexport default Scrollbar;\n","import { Helmet } from 'react-helmet-async'\n\nimport ChatHeader from './ChatHeader'\nimport ChatInput from './ChatInput'\nimport ChatContent from './ChatContent'\n\nimport Scrollbar from 'src/components/Scrollbar'\n\nimport { Box, styled, Divider } from '@mui/material'\nimport { useNavigate, useParams } from 'react-router-dom'\nimport { useEffect, useState } from 'react'\nimport { getQuestionChat } from 'src/api/chat'\nimport { useAuthHeader } from 'react-auth-kit'\nimport { ChatHistory, Profile } from 'src/models/chat'\nimport { enqueueSnackbar } from 'notistack'\n\nconst ChatScreen = () => {\n  const { category } = useParams()\n  const qaId = Number(category)\n  const token = useAuthHeader()()\n  const [chatDetails, setChatDetails] = useState<ChatHistory[]>([])\n  const [profile, setProfile] = useState<Profile | null>(null)\n  const [isQuestionUser, setIsQuestionUser] = useState(false)\n  const [isRefresh, setIsRefresh] = useState(false)\n  const [isLoading, setIsLoading] = useState(false)\n  const [chatState, setChatState] = useState<number>(0)\n  const navigate = useNavigate()\n\n  if (!token) {\n    enqueueSnackbar('로그인이 필요한 서비스입니다.', { variant: 'error' })\n    navigate('/')\n    return null\n  }\n  const handleRefresh = () => {\n    setIsRefresh(!isRefresh)\n  }\n\n  const handleFetchChatDetails = async () => {\n    try {\n      setIsLoading(true)\n      const res = await getQuestionChat(token, qaId)\n      setChatDetails(res.chats)\n      if (res.profile) {\n        setProfile(res.profile)\n      }\n      setIsQuestionUser(res.isQuestionUser)\n      setIsLoading(false)\n      setChatState(res.state)\n    } catch (error) {\n      enqueueSnackbar('채팅 내역을 불러오는데 실패했어요. 나중에 다시 시도해 주세요', { variant: 'error' })\n    }\n  }\n\n  useEffect(() => {\n    if (!qaId) return\n    handleFetchChatDetails()\n  }, [qaId, isRefresh])\n\n  return (\n    <>\n      <Helmet>\n        <title>채팅</title>\n      </Helmet>\n      <RootWrapper className=\"Mui-FixedWrapper\">\n        <ChatWindow>\n          {!!qaId && (\n            <ChatTopBar sx={{ display: { xs: 'flex', lg: 'inline-block' } }}>\n              <ChatHeader\n                isQuestionUser={isQuestionUser}\n                chatState={chatState}\n                profile={profile}\n                qaId={qaId}\n                createdAt={chatDetails?.length !== 0 ? chatDetails[0].createdAt : ''}\n                handleRefresh={handleRefresh}\n              />\n            </ChatTopBar>\n          )}\n          <Box flex={1}>\n            <Scrollbar>\n              <ChatContent\n                chatState={chatState}\n                isQuestionUser={isQuestionUser}\n                nickname={profile?.nickname ?? 'BOT'}\n                chatDetails={chatDetails}\n                isLoading={isLoading}\n              />\n            </Scrollbar>\n          </Box>\n          <Divider />\n          {(chatState === 0 || chatState === 2) && (\n            <ChatInput isQuestionUser={isQuestionUser} handleRefresh={handleRefresh} />\n          )}\n        </ChatWindow>\n      </RootWrapper>\n    </>\n  )\n}\n\nexport default ChatScreen\n\nconst RootWrapper = styled(Box)(\n  ({ theme }) => `\n       height: calc(100vh - ${theme.header.height});\n       display: flex;\n`\n)\n\nconst ChatWindow = styled(Box)(\n  () => `\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n        flex: 1;\n`\n)\n\nconst ChatTopBar = styled(Box)(\n  ({ theme }) => `\n        background: ${theme.colors.alpha.white[100]};\n        border-bottom: ${theme.colors.alpha.black[10]} solid 1px;\n        padding: ${theme.spacing(2)};\n        align-items: center;\n`\n)\nfunction postQuestionStart(token: string, qaId: number) {\n  throw new Error('Function not implemented.')\n}\n","import MilitaryTechIcon from '@mui/icons-material/MilitaryTech'\r\nimport { BadgeSet } from 'src/models/user'\r\n\r\ninterface RankBadgeProps {\r\n  rank: number\r\n}\r\n\r\nconst badgeColor = {\r\n  BRONZE: '#cd7f32',\r\n  SILVER: '#c0c0c0',\r\n  GOLD: '#ffd700',\r\n  PLATINUM: '#00ced1',\r\n  DIAMOND: '#b9f2ff'\r\n}\r\n\r\nconst RankBadge = ({ rank }: RankBadgeProps) => {\r\n  const badgeType = BadgeSet[rank].split(' ')[0]\r\n  return <MilitaryTechIcon sx={{ fontSize: 38, color: badgeColor[badgeType] }} />\r\n}\r\n\r\nexport default RankBadge\r\n"],"names":["getQuestions","category","ApiManager","response","data","toUpperCase","postQuestionNew","token","questionInfo","headers","Authorization","res","postQuestionJoin","questionId","qaId","postQuestionEndAI","postQuestionEnd","props","cancelText","primaryText","text","open","onClose","onClickPrimary","Dialog","Typography","variant","sx","fontWeight","textAlign","mt","maxWidth","p","DialogActions","Button","onClick","autoFocus","BOT","isQuestionUser","profile","createdAt","chatState","handleRefresh","useState","isOpenDone","setIsOpenDone","isOpenChange","setIsOpenChange","isOpenAnswer","setIsOpenAnswer","navigate","useNavigate","useAuthHeader","handleOpenDone","prev","handleOpenAnswer","handleOpenChange","handleStartAnswering","enqueueSnackbar","handleClickDone","handleClickChange","RootWrapper","Box","display","alignItems","Avatar","bgcolor","stringToHexColor","nickname","width","justifyContent","Rank","rank","Chip","label","GradeSet","grade","mx","size","color","univId","slice","mr","split","replaceAll","Tooltip","placement","title","startIcon","CheckCircle","RecordVoiceOver","QuestionAnswer","styled","theme","breakpoints","values","md","postQuestionChat","chatInfo","console","log","getQuestionChat","useTheme","user","useAuthUser","useParams","Number","question","setQuestionInfo","chat","isQuestion","setChatInfo","handleSendMessage","handleCreateChatRoom","id","background","colors","alpha","white","flexGrow","MessageInputWrapper","placeholder","fullWidth","value","onChange","event","target","SendTwoTone","height","InputBase","typography","pxToRem","spacing","formatChatTime","sentAt","date","Date","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","today","getFullYear","message","py","pt","CardWrapperPrimary","Card","primary","main","palette","contrastText","general","borderRadiusXl","borderRadius","bgColor","ml","CardWrapperSecondary","mb","CircularProgress","black","chatDetails","isLoading","isAI","map","chatDetail","index","className","children","rest","autoHide","renderThumbVertical","borderRadiusLg","transition","transitions","create","setChatDetails","setProfile","setIsQuestionUser","isRefresh","setIsRefresh","setIsLoading","setChatState","handleFetchChatDetails","chats","state","useEffect","ChatWindow","ChatTopBar","xs","lg","length","flex","Divider","header","badgeColor","BRONZE","SILVER","GOLD","PLATINUM","DIAMOND","badgeType","BadgeSet","fontSize"],"sourceRoot":""}